'use strict';

let defaultOptions = [
	'contrast',
	'mute',
	'theme',
	'colorize',
	'colorize-bg',
	'defer',
];
let options = [
	'contrast',
	'mute',
	'theme',
	'colorize',
	'colorize-bg',
	'defer',
	'default',
];

module.exports = {
	base: {
		type: 'object',
		properties: {
			variable: {
				type: 'string',
				title: "Variables (scope: 'variable')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 1,
			},
			comment: {
				type: 'string',
				title: "Comments (scope: 'comment')",
				default: 'theme',
				enum: defaultOptions,
				order: 2,
			},
			primitive: {
				type: 'string',
				title: "Primitives (scope: 'primitive')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 3,
			},
			storage_modifier: {
				type: 'string',
				title: "Storage modifiers (scope: 'storage.modifier')",
				default: 'theme',
				enum: defaultOptions,
				order: 4,
			},
			storage_type: {
				type: 'string',
				title: "Storage types (scope: 'storage.type')",
				default: 'theme',
				enum: defaultOptions,
				order: 5,
			},
			support_type: {
				type: 'string',
				title: "Support types (scope: 'support.type')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 6,
			},
			language: {
				type: 'string',
				title: "Language elements (scope: 'language')",
				default: 'theme',
				enum: defaultOptions,
				order: 7,
			},
			keyword: {
				type: 'string',
				title: "Keywords (scope: 'keyword')",
				default: 'theme',
				enum: defaultOptions,
				order: 8,
			},
			operator: {
				type: 'string',
				title: "Operators (scope: 'operator')",
				default: 'theme',
				enum: defaultOptions,
				order: 9,
			},
			punctuation: {
				type: 'string',
				title: "Punctuation (scope: 'punctuation')",
				default: 'theme',
				enum: defaultOptions,
				order: 10,
			},
			markup: {
				type: 'string',
				title: "Markup (scope: 'markup')",
				default: 'theme',
				enum: defaultOptions,
				order: 11,
			},
			string_quoted: {
				type: 'string',
				title: "Quoted string constants (scope: 'string.quoted')",
				default: 'theme',
				enum: defaultOptions,
				order: 12,
			},
			regexp: {
				type: 'string',
				title: "Regular expressions (scope: 'regexp')",
				default: 'theme',
				enum: defaultOptions,
				order: 13,
			},
			support_constant: {
				type: 'string',
				title: "Support constants (scope: 'support.constant')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 14,
			},
			constant_numeric: {
				type: 'string',
				title: "Numeric constants (scope: 'constant.numeric')",
				default: 'theme',
				enum: defaultOptions,
				order: 15,
			},
			source: {
				type: 'string',
				title: "Source (scope: 'source')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 16,
			},
			name: {
				type: 'string',
				title: "Name (scope: 'name')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 17,
			},
			'attribute-name': {
				type: 'string',
				title: "Attribute name (scope: 'attribute-name')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 18,
			},
			everythingElse: {
				type: 'string',
				title: 'Everything else',
				default: 'theme',
				enum: defaultOptions,
				order: 19,
			},
			'property-name': {
				type: 'string',
				title: "Property name (like a css style) (scope: 'property-name')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 20,
			},
			string_unquoted: {
				type: 'string',
				title: "Object properties (scope: 'string.unquoted')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 21,
			},
			keyword_type: {
				type: 'string',
				title: "Variable type (scope: 'keyword.type')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 22,
			},
			support_type_primitive: {
				type: 'string',
				title:
					"In typescript, built in variable types like string (scope: 'support.type.primitive')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 23,
			},
			'meta_object-literal_key': {
				type: 'string',
				title:
					"An object (definition) property in typescript (scope: 'meta.object-literal.key')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 24,
			},
			constant_other_label: {
				type: 'string',
				title:
					"In javascript when a object property definition goes onto two lines, the property text (scope: 'constant.other.label')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 25,
			},
			'support_type_property-name': {
				type: 'string',
				title:
					"A known Property name (like a css style background-height ) (scope: 'support.type.property-name')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 26,
			},
			'inherited-class': {
				type: 'string',
				title:
					"In typescript when a type extends, this is the extended type (scope: 'inherited-class')",
				// .entity.other.inherited-class (specific scope , but leaving it open incase other languages use inherited-class)
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 27,
			},
			support_type_builtin_primitive: {
				type: 'string',
				title:
					"A built in type for flowtype (scope: 'support.type.builtin.primitive')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 28,
			},
			support_type_class: {
				type: 'string',
				title: "A flowtype class (scope: 'support.type.property-name')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 29,
			},
			string_template: {
				type: 'string',
				title: "String templates (scope: 'string.template')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 30,
			},
			support_function: {
				type: 'string',
				title:
					"Some function properties (like dom functions) (scope: 'support.function')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 31,
			},
			meta_class: {
				type: 'string',
				title:
					"Variables with a first capital letter in javascript (scope: 'meta.class')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 32,
			},
			constant_other: {
				type: 'string',
				title:
					"All caps constand variables (like OPTIONS ) (scope: 'constant.other')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 33,
			},
			support_storage_type: {
				type: 'string',
				title: "A Typescript type (scope: 'support.storage.type')",
				default: 'colorize-bg',
				enum: defaultOptions,
				order: 34,
			},
		},
	},
	empty: {
		type: 'object',
		collapsed: true,
		properties: {
			enabled: {
				type: 'boolean',
				title: 'Enabled',
				default: 'true',
				order: 0,
			},
			variable: {
				type: 'string',
				title: "Variables (scope: 'variable')",
				default: 'default',
				enum: options,
				order: 1,
			},
			comment: {
				type: 'string',
				title: "Comments (scope: 'comment')",
				default: 'default',
				enum: options,
				order: 2,
			},
			primitive: {
				type: 'string',
				title: "Primitives (scope: 'primitive')",
				default: 'default',
				enum: options,
				order: 3,
			},
			storage_modifier: {
				type: 'string',
				title: "Storage modifiers (scope: 'storage.modifier')",
				default: 'default',
				enum: options,
				order: 4,
			},
			storage_type: {
				type: 'string',
				title: "Storage types (scope: 'storage.type')",
				default: 'default',
				enum: options,
				order: 5,
			},
			support_type: {
				type: 'string',
				title: "Support types (scope: 'support.type')",
				default: 'default',
				enum: options,
				order: 6,
			},
			language: {
				type: 'string',
				title: "Language elements (scope: 'language')",
				default: 'default',
				enum: options,
				order: 7,
			},
			keyword: {
				type: 'string',
				title: "Keywords (scope: 'keyword')",
				default: 'default',
				enum: options,
				order: 8,
			},
			operator: {
				type: 'string',
				title: "Operators (scope: 'operator')",
				default: 'default',
				enum: options,
				order: 9,
			},
			punctuation: {
				type: 'string',
				title: "Punctuation (scope: 'punctuation')",
				default: 'default',
				enum: options,
				order: 10,
			},
			markup: {
				type: 'string',
				title: "Markup (scope: 'markup')",
				default: 'default',
				enum: options,
				order: 11,
			},
			string_quoted: {
				type: 'string',
				title: "String constants (scope: 'string.quoted')",
				default: 'default',
				enum: options,
				order: 12,
			},
			regexp: {
				type: 'string',
				title: "Regular expressions (scope: 'regexp')",
				default: 'default',
				enum: options,
				order: 13,
			},
			support_constant: {
				type: 'string',
				title: "Support constants (scope: 'support.constant')",
				default: 'default',
				enum: options,
				order: 14,
			},
			constant_numeric: {
				type: 'string',
				title: "Numeric constants (scope: 'constant.numeric')",
				default: 'default',
				enum: options,
				order: 15,
			},
			source: {
				type: 'string',
				title: "Source (scope: 'source')",
				default: 'default',
				enum: options,
				order: 16,
			},
			name: {
				type: 'string',
				title: "Name (scope: 'name')",
				default: 'default',
				enum: options,
				order: 17,
			},
			'attribute-name': {
				type: 'string',
				title: "Attribute name (scope: 'attribute-name')",
				default: 'default',
				enum: options,
				order: 18,
			},
			everythingElse: {
				type: 'string',
				title: 'Everything else',
				default: 'default',
				enum: options,
				order: 19,
			},
			'property-name': {
				type: 'string',
				title: "Property name (like a css style) (scope: 'property-name')",
				default: 'default',
				enum: options,
				order: 20,
			},
			string_unquoted: {
				type: 'string',
				title: "Object properties (scope: 'string.unquoted')",
				default: 'default',
				enum: options,
				order: 21,
			},
			keyword_type: {
				type: 'string',
				title: "Variable type (scope: 'keyword.type')",
				default: 'default',
				enum: options,
				order: 22,
			},
			support_type_primitive: {
				type: 'string',
				title:
					"In typescript, built in variable types like string (scope: 'support.type.primitive')",
				default: 'default',
				enum: options,
				order: 23,
			},
			'meta_object-literal_key': {
				type: 'string',
				title:
					"An object (definition) property in typescript (scope: 'meta.object-literal.key')",
				default: 'default',
				enum: options,
				order: 24,
			},
			constant_other_label: {
				type: 'string',
				title:
					"In javascript when a object property definition goes onto two lines, the property text (scope: 'constant.other.label')",
				default: 'default',
				enum: options,
				order: 25,
			},
			'support_type_property-name': {
				type: 'string',
				title:
					"A known Property name (like a css style background-height ) (scope: 'support.type.property-name')",
				default: 'default',
				enum: options,
				order: 26,
			},
			'inherited-class': {
				type: 'string',
				title:
					"In typescript when a type extends, this is the extended type (scope: 'inherited-class')",
				// .entity.other.inherited-class (specific scope , but leaving it open incase other languages use inherited-class)
				default: 'default',
				enum: options,
				order: 27,
			},
			support_type_builtin_primitive: {
				type: 'string',
				title:
					"A built in type for flowtype (scope: 'support.type.builtin.primitive')",
				default: 'default',
				enum: options,
				order: 28,
			},
			support_type_class: {
				type: 'string',
				title: "A flowtype class (scope: 'support.type.property-name')",
				default: 'default',
				enum: options,
				order: 29,
			},
			string_template: {
				type: 'string',
				title: "String templates (scope: 'string.template')",
				default: 'default',
				enum: options,
				order: 30,
			},
			support_function: {
				type: 'string',
				title:
					"Some function properties (like dom functions) (scope: 'support.function')",
				default: 'default',
				enum: options,
				order: 31,
			},
			meta_class: {
				type: 'string',
				title:
					"Variables with a first capital letter in javascript (scope: 'meta.class')",
				default: 'default',
				enum: options,
				order: 32,
			},
			constant_other: {
				type: 'string',
				title:
					"All caps constand variables (like OPTIONS ) (scope: 'constant.other')",
				default: 'default',
				enum: options,
				order: 33,
			},
			support_storage_type: {
				type: 'string',
				title: "A Typescript type (scope: 'support.storage.type')",
				default: 'default',
				enum: options,
				order: 34,
			},
		},
	},
};
